/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class EmbedFlattener {
    constructor(app, increaseLevelOfEmbeddedHeadings, removeYAML, convertWikiLinks, convertReferencesForBaseURL, baseURL, pageSeparator, headingLevel) {
        this.app = app;
        this.increaseLevelOfEmbeddedHeadings = increaseLevelOfEmbeddedHeadings;
        this.removeYAML = removeYAML;
        this.convertWikiLinks = convertWikiLinks;
        this.convertReferencesForBaseURL = convertReferencesForBaseURL;
        this.baseURL = baseURL;
        this.pageSeparator = pageSeparator;
        this.headingLevel = headingLevel;
        this.page = 1;
        this.headings = {};
    }
    flatten(file, depth = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            var fileContents = yield this.app.vault.read(file);
            const metadata = this.app.metadataCache.getFileCache(file);
            var replacements = [];
            if (metadata.headings && this.convertReferencesForBaseURL) {
                metadata.headings.forEach((heading) => {
                    if (heading.level + (this.increaseLevelOfEmbeddedHeadings ? depth : 0) == this.headingLevel) {
                        var location = heading.position.start.offset;
                        var useLocation = false;
                        var inBlock = false;
                        while (location > 0) {
                            location -= 1;
                            if (inBlock) {
                                if (fileContents[location] == '[') {
                                    useLocation = true;
                                    break;
                                }
                                else if (fileContents[location] == ']') {
                                    break;
                                }
                            }
                            else if (/\s/.test(fileContents[location])) {
                                continue;
                            }
                            else if (fileContents[location] == ']') {
                                inBlock = true;
                            }
                            else {
                                break;
                            }
                        }
                        replacements.push({
                            start: useLocation ? location : heading.position.start.offset,
                            end: useLocation ? location : heading.position.start.offset,
                            string: `\n${this.pageSeparator}\n`
                        });
                    }
                });
            }
            if (metadata.headings && this.increaseLevelOfEmbeddedHeadings && depth > 0) {
                metadata.headings.forEach((heading) => {
                    if (heading.level < 6) {
                        const hashIndex = fileContents.indexOf("#", heading.position.start.offset);
                        replacements.push({
                            start: hashIndex,
                            end: hashIndex,
                            string: "#".repeat(Math.max(Math.min(heading.level + depth, 6) - heading.level, 0))
                        });
                    }
                });
            }
            if (this.removeYAML && metadata.frontmatter) {
                replacements.push({
                    start: metadata.frontmatter.position.start.offset,
                    end: metadata.frontmatter.position.end.offset,
                    string: ''
                });
            }
            if (metadata.embeds) {
                for (const embed of metadata.embeds) {
                    const linkpath = obsidian.getLinkpath(embed.link);
                    const linkedFile = this.app.metadataCache.getFirstLinkpathDest(linkpath, file.path);
                    if (linkedFile && linkedFile.extension.toLowerCase() == "md") {
                        const flattenedLinkedFileContents = yield this.flatten(linkedFile, Math.min(depth + 1, 6));
                        replacements.push({
                            start: embed.position.start.offset,
                            end: embed.position.end.offset,
                            string: flattenedLinkedFileContents
                        });
                    }
                }
            }
            replacements.sort((a, b) => a.start - b.start);
            replacements.reverse().forEach((replacement) => {
                fileContents = fileContents.substring(0, replacement.start) + replacement.string + fileContents.substring(replacement.end);
            });
            return fileContents.trim();
        });
    }
    extractComplaints(fileContents, delimiter) {
        if (delimiter.length == 0) {
            return fileContents;
        }
        const complaintRegex = new RegExp(`${delimiter}(.*)${delimiter}`, 'g');
        var newFileContents = fileContents;
        var replacements = [];
        var match;
        while ((match = complaintRegex.exec(fileContents)) !== null) {
            replacements.push({
                start: match.index,
                end: match.index + match[0].length,
                string: match[1]
            });
        }
        replacements.sort((a, b) => a.start - b.start);
        replacements.reverse().forEach((replacement) => {
            newFileContents = newFileContents.substring(0, replacement.start) + replacement.string + newFileContents.substring(replacement.end);
        });
        newFileContents = newFileContents.trim();
        if (replacements.length > 0) {
            newFileContents += `\n\n${this.pageSeparator}\n\n`;
            replacements.reverse().forEach((replacement) => {
                newFileContents += `- ${replacement.string}\n`;
            });
        }
        return newFileContents.trim();
    }
    replaceLinks(fileContents) {
        var _a;
        const linkRegex = /\[\[(?:([^#\n\]]+)#)?([^\]\n|]+)(?:\|([^\]\n]+))?\]\]/g;
        var newFileContents = fileContents;
        var replacements = [];
        var match;
        while ((match = linkRegex.exec(fileContents)) !== null) {
            let link = match[2];
            if (this.convertReferencesForBaseURL) {
                let split = fileContents.split('# ' + link + '\n');
                if (split.length < 2) {
                    console.log('Linked section "' + link + '" not found!');
                }
                else if (split.length > 2) {
                    new obsidian.Notice('Linked section "' + link + '" found more than once!');
                    console.log('Linked section "' + link + '" found more than once!');
                }
                else {
                    let page = (split[0].substring(0, split[0].length - 1).match(new RegExp(this.pageSeparator, 'g')) || []).length + 1;
                    let title = (_a = match[3]) !== null && _a !== void 0 ? _a : (match[1] ? `${match[1]} â‡¾ ${link}` : link);
                    replacements.push({
                        start: match.index,
                        end: match.index + match[0].length,
                        string: `[${title}](${this.baseURL}/${page}/#${link.toLowerCase().split(' ').join('-').replace(',', '').replace('\'', '')})`
                    });
                }
            }
            else if (this.convertWikiLinks) {
                replacements.push({
                    start: match.index,
                    end: match.index + match[0].length,
                    string: `[${link}](${encodeURI(`obsidian://open?vault=${this.app.vault.getName()}&file=${link}.md`)})`
                });
            }
        }
        replacements.sort((a, b) => a.start - b.start);
        replacements.reverse().forEach((replacement) => {
            newFileContents = newFileContents.substring(0, replacement.start) + replacement.string + newFileContents.substring(replacement.end);
        });
        return newFileContents.trim();
    }
}

class SettingsModal extends obsidian.Modal {
    constructor(plugin) {
        super(plugin.app);
        this.plugin = plugin;
        this.saveLocation = "Obsidian";
        this.increaseLevelOfEmbeddedHeadings = true;
        this.removeYAML = true;
        this.convertReferencesForBaseURL = false;
    }
    onOpen() {
        let { contentEl } = this;
        const saveLocation = new obsidian.Setting(contentEl);
        saveLocation.setName("Save location");
        saveLocation.addDropdown((dropdown) => {
            dropdown.addOption("Obsidian", "Obsidian");
            dropdown.addOption("Clipboard", "Clipboard");
            dropdown.setValue(this.saveLocation);
            dropdown.onChange((value) => { this.saveLocation = value; });
        });
        const increaseHeaders = new obsidian.Setting(contentEl);
        increaseHeaders.setName("Increase headings of referenced notes");
        increaseHeaders.addToggle((toggle) => {
            toggle.setValue(this.increaseLevelOfEmbeddedHeadings);
            toggle.onChange((value) => { this.increaseLevelOfEmbeddedHeadings = value; });
        });
        const removeYAML = new obsidian.Setting(contentEl);
        removeYAML.setName("Remove YAML");
        removeYAML.addToggle((toggle) => {
            toggle.setValue(this.removeYAML);
            toggle.onChange((value) => { this.removeYAML = value; });
        });
        const baseURLExport = new obsidian.Setting(contentEl);
        baseURLExport.setName("Convert references using baseURL");
        baseURLExport.addToggle((toggle) => {
            toggle.setValue(this.convertReferencesForBaseURL);
            toggle.onChange((value) => { this.convertReferencesForBaseURL = value; });
        });
        const saveButton = new obsidian.Setting(contentEl);
        saveButton.addButton((button) => {
            button.setButtonText("Save");
            button.setCta();
            button.onClick((event) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const activeFile = this.app.workspace.getActiveFile();
                const metadata = this.app.metadataCache.getFileCache(activeFile);
                if (this.convertReferencesForBaseURL && (!metadata.frontmatter || !metadata.frontmatter['baseURL'])) {
                    new obsidian.Notice('No Base URL Found');
                    this.close();
                    return;
                }
                const embedFlattener = new EmbedFlattener(this.app, this.increaseLevelOfEmbeddedHeadings, this.removeYAML, this.saveLocation != "Obsidian" && !this.convertReferencesForBaseURL, this.convertReferencesForBaseURL, (_a = metadata.frontmatter) === null || _a === void 0 ? void 0 : _a['baseURL'], this.plugin.settings.pageSeparator, parseInt(this.plugin.settings.headingLevel[1]));
                const flattened = yield embedFlattener.flatten(activeFile);
                const flattenedLinked = embedFlattener.replaceLinks(flattened);
                const flattenedLinkedExtracted = embedFlattener.extractComplaints(flattenedLinked, this.plugin.settings.complaintDelimiter);
                switch (this.saveLocation) {
                    case "Obsidian":
                        const newFileParent = this.app.fileManager.getNewFileParent(activeFile.path);
                        var firstHeading;
                        var headings = metadata.headings;
                        if (headings) {
                            firstHeading = headings.find((heading) => heading.level == 1);
                        }
                        var fileName = "Untitled.md";
                        var num = 1;
                        if (firstHeading) {
                            fileName = `${firstHeading.heading}.md`;
                            while (yield this.app.vault.adapter.exists(newFileParent.path + fileName)) {
                                fileName = `${firstHeading.heading} ${num}.md`;
                                num++;
                            }
                        }
                        else {
                            while (yield this.app.vault.adapter.exists(newFileParent.path + fileName)) {
                                fileName = `Untitled ${num}.md`;
                                num++;
                            }
                        }
                        yield this.app.vault.create(newFileParent.path + fileName, flattenedLinkedExtracted);
                        yield this.app.workspace.openLinkText(newFileParent.path + fileName, "");
                        new obsidian.Notice(`Exported to ${fileName}!`);
                        break;
                    case "Clipboard":
                        navigator.clipboard.writeText(flattenedLinkedExtracted);
                        new obsidian.Notice("Exported to Clipboard!");
                        break;
                }
                this.close();
            }));
        });
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

const DEFAULT_SETTINGS = {
    pageSeparator: '<!--nextpage-->',
    headingLevel: 'H2',
    complaintDelimiter: ''
};
class ExportPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            obsidian.addIcon('share-export', '<path d="M38.1609646,27.386905 C40.1107263,27.386905 41.6913204,28.9674991 41.6913204,30.9172608 C41.6913204,32.7973881 40.2216098,34.3342462 38.3683998,34.4416236 L38.1609646,34.4476166 L28.1682857,34.4476166 C23.8526504,34.4476166 20.4999744,37.3040026 20.3498091,40.6480766 L20.3445567,40.8821456 L20.3445567,79.2032472 C20.3445567,82.5687232 23.5991502,85.5015973 27.8687854,85.6331714 L28.1682857,85.6377761 L71.8317143,85.6377761 C76.1473496,85.6377761 79.5000256,82.7813901 79.6501909,79.4373161 L79.6554433,79.2032472 L79.6554433,40.8821456 C79.6554433,37.5230318 76.4126677,34.5936975 72.1601567,34.4528866 L71.8618597,34.4476166 L61.8390354,34.4476166 C59.8892737,34.4476166 58.3086796,32.8670225 58.3086796,30.9172608 C58.3086796,29.0371334 59.7783902,27.5002754 61.6316002,27.392898 L61.8390354,27.386905 L71.8699314,27.386905 C79.8567962,27.4051752 86.5117038,33.1539657 86.7115341,40.5400994 L86.7161549,40.8821456 L86.7161549,79.2032472 C86.7161549,86.6518186 80.1603597,92.5183535 72.2000899,92.6944173 L71.8317143,92.6984878 L28.1682857,92.6984878 C20.1660205,92.6984878 13.4889788,86.9448101 13.2884813,79.5458891 L13.2838451,79.2032472 L13.2838451,40.8821456 C13.2838451,33.4335741 19.8396403,27.5670393 27.7999101,27.3909754 L28.1682857,27.386905 L38.1609646,27.386905 Z" id="Path" fill="currentColor" fill-rule="nonzero"></path><line x1="50.1114536" y1="53" x2="50.1114536" y2="10.4081181" id="Line" stroke="currentColor" stroke-width="6" stroke-linecap="round"></line><line x1="40.3995367" y1="20.120035" x2="50.1114536" y2="10.4081181" id="Line" stroke="currentColor" stroke-width="6" stroke-linecap="round"></line><line x1="50.2229073" y1="20.120035" x2="59.9348242" y2="10.4081181" id="Line" stroke="currentColor" stroke-width="6" stroke-linecap="round" transform="translate(54.967412, 15.375530) scale(-1, 1) translate(-54.967412, -15.375530) "></line>');
            obsidian.addIcon('share-macstories', '<path d="M38.1609646,27.386905 C40.1107263,27.386905 41.6913204,28.9674991 41.6913204,30.9172608 C41.6913204,32.7973881 40.2216098,34.3342462 38.3683998,34.4416236 L38.1609646,34.4476166 L28.1682857,34.4476166 C23.8526504,34.4476166 20.4999744,37.3040026 20.3498091,40.6480766 L20.3445567,40.8821456 L20.3445567,79.2032472 C20.3445567,82.5687232 23.5991502,85.5015973 27.8687854,85.6331714 L28.1682857,85.6377761 L71.8317143,85.6377761 C76.1473496,85.6377761 79.5000256,82.7813901 79.6501909,79.4373161 L79.6554433,79.2032472 L79.6554433,40.8821456 C79.6554433,37.5230318 76.4126677,34.5936975 72.1601567,34.4528866 L71.8618597,34.4476166 L61.8390354,34.4476166 C59.8892737,34.4476166 58.3086796,32.8670225 58.3086796,30.9172608 C58.3086796,29.0371334 59.7783902,27.5002754 61.6316002,27.392898 L61.8390354,27.386905 L71.8699314,27.386905 C79.8567962,27.4051752 86.5117038,33.1539657 86.7115341,40.5400994 L86.7161549,40.8821456 L86.7161549,79.2032472 C86.7161549,86.6518186 80.1603597,92.5183535 72.2000899,92.6944173 L71.8317143,92.6984878 L28.1682857,92.6984878 C20.1660205,92.6984878 13.4889788,86.9448101 13.2884813,79.5458891 L13.2838451,79.2032472 L13.2838451,40.8821456 C13.2838451,33.4335741 19.8396403,27.5670393 27.7999101,27.3909754 L28.1682857,27.386905 L38.1609646,27.386905 Z" id="Path" fill="currentColor" fill-rule="nonzero"></path><line x1="50.1114536" y1="32.4893815" x2="50.1114536" y2="10.4081181" id="Line" stroke="currentColor" stroke-width="6" stroke-linecap="round"></line><path d="M62.2385669,38.8605614 L37.7614331,38.8605614 C36.461592,38.8605614 35.4078626,39.9142908 35.4078626,41.2141319 L35.4078626,78.8712608 L35.4142174,79.0506115 C35.5488523,80.935995 37.7928187,81.921374 39.2771846,80.6717584 L49.9988232,71.6445579 L60.7228154,80.6717584 C62.2535678,81.9604244 64.5921374,80.8722262 64.5921374,78.8712608 L64.5921374,41.2141319 C64.5921374,39.9142908 63.538408,38.8605614 62.2385669,38.8605614 Z M59.8849963,43.567638 L59.8849963,73.8133732 L51.5157515,66.7677086 L51.3571443,66.6452288 C50.4906467,66.0328297 49.3086841,66.0736563 48.4842485,66.7677086 L40.1150037,73.8121964 L40.1150037,43.567638 L59.8849963,43.567638 Z" id="Rectangle" fill="currentColor" fill-rule="nonzero"></path><line x1="40.3995367" y1="20.120035" x2="50.1114536" y2="10.4081181" id="Line" stroke="currentColor" stroke-width="6" stroke-linecap="round"></line><line x1="50.2229073" y1="20.120035" x2="59.9348242" y2="10.4081181" id="Line" stroke="currentColor" stroke-width="6" stroke-linecap="round" transform="translate(54.967412, 15.375530) scale(-1, 1) translate(-54.967412, -15.375530) "></line>');
            this.addSettingTab(new ExportPluginSettingTab(this.app, this));
            this.addCommand({
                id: 'export-markdown-with-embeds',
                name: 'Export Markdown with Embeds',
                icon: 'share-export',
                callback: () => {
                    const file = this.app.workspace.getActiveFile();
                    if (file !== null) {
                        new SettingsModal(this).open();
                        return true;
                    }
                    return false;
                }
            });
            if (this.app.isMobile) {
                this.addCommand({
                    id: 'share-markdown-with-embeds',
                    name: 'Share Markdown with Embeds',
                    icon: 'share-export',
                    callback: () => __awaiter(this, void 0, void 0, function* () {
                        const file = this.app.workspace.getActiveFile();
                        if (file !== null) {
                            const embedFlattener = new EmbedFlattener(this.app, true, true, true, false, '', this.settings.pageSeparator, 0);
                            const flattened = yield embedFlattener.flatten(file);
                            const flattenedLinked = embedFlattener.replaceLinks(flattened);
                            const flattenedLinkedExtracted = embedFlattener.extractComplaints(flattenedLinked, this.settings.complaintDelimiter);
                            const share = {
                                text: flattenedLinkedExtracted,
                            };
                            navigator.share(share);
                            return true;
                        }
                        return false;
                    })
                });
                this.addCommand({
                    id: 'share-markdown-with-embeds-baseURL',
                    name: 'Share Markdown with Embeds with baseURL',
                    icon: 'share-macstories',
                    callback: () => __awaiter(this, void 0, void 0, function* () {
                        var _a;
                        const file = this.app.workspace.getActiveFile();
                        if (file !== null) {
                            const metadata = this.app.metadataCache.getFileCache(file);
                            if ((_a = metadata.frontmatter) === null || _a === void 0 ? void 0 : _a['baseURL']) {
                                const embedFlattener = new EmbedFlattener(this.app, true, true, false, true, metadata.frontmatter['baseURL'], this.settings.pageSeparator, parseInt(this.settings.headingLevel[1]));
                                const flattened = yield embedFlattener.flatten(file);
                                const flattenedLinked = embedFlattener.replaceLinks(flattened);
                                const flattenedLinkedExtracted = embedFlattener.extractComplaints(flattenedLinked, this.settings.complaintDelimiter);
                                const share = {
                                    text: flattenedLinkedExtracted,
                                };
                                navigator.share(share);
                                return true;
                            }
                            else {
                                new obsidian.Notice('No baseURL specified.');
                                return false;
                            }
                        }
                        return false;
                    })
                });
            }
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class ExportPluginSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for the Export Markdown with Embeds plugin.' });
        new obsidian.Setting(containerEl)
            .setName('Page separator')
            .setDesc('The text to insert between pages when exporting with baseURL.')
            .addText(text => text
            .setPlaceholder('e.x. <!--nextpage-->')
            .setValue(this.plugin.settings.pageSeparator)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.pageSeparator = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('New page heading level')
            .setDesc('The heading level that marks the start of a new page.')
            .addDropdown(dropdown => dropdown
            .addOption('H1', 'H1')
            .addOption('H2', 'H2')
            .addOption('H3', 'H3')
            .addOption('H4', 'H4')
            .addOption('H5', 'H5')
            .addOption('H6', 'H6')
            .setValue(this.plugin.settings.headingLevel)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.headingLevel = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Highlight delimiter')
            .setDesc('Sentences surrounded by the highlight delimiter will be copied to a list at the bottom of the compiled document, and the delimiters will be removed.')
            .addText(text => text
            .setPlaceholder('e.x. :::')
            .setValue(this.plugin.settings.complaintDelimiter)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.complaintDelimiter = value;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = ExportPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
